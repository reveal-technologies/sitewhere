<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.sitewhere.com/schema/sitewhere/ce" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.sitewhere.com/schema/sitewhere/ce"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"
		schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>

	<xsd:element name="configuration" type="configurationType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for a SiteWhere server instance.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="configurationType">
		<xsd:all>
			<xsd:element name="globals" type="globalsType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Global configuration settings for external services that SiteWhere
						interacts with.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="datastore" type="datastoreType">
				<xsd:annotation>
					<xsd:documentation>
						Provides information about how SiteWhere data is to be persisted
						and how the core device and user management service provider interfaces are
						implemented. Caching of persisted data is also configured in this section.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="abstract-provisioning-implementation"/>
			<xsd:element name="inbound-processing-chain" type="inboundProcessingChainType">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all inbound device information
						is passed. Each processor handles some piece of processing and passes information on
						to the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outbound-processing-chain" type="outboundProcessingChainType">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all outbound device events are
						passed. Each processor handles some piece of processing and passes information on to
						the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="asset-management" type="assetManagementType">
				<xsd:annotation>
					<xsd:documentation>
						Specifies details related to the asset management subsystem
						including the asset manager implementation and the list of asset modules that should
						be used for device assignments.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="search-providers" type="searchProvidersType">
				<xsd:annotation>
					<xsd:documentation>
						Specifies a list of external search providers that have indexed
						SiteWhere data and may be queried via the REST services, returning a list of
						SiteWhere events.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>

	<xsd:complexType name="datastoreType">
		<xsd:all>
			<xsd:element ref="abstract-datastore"/>
			<xsd:element ref="abstract-cache" minOccurs="0"/>
			<xsd:element minOccurs="0" name="default-device-model-initializer" type="defaultDeviceModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes device model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="default-user-model-initializer" type="defaultUserModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes user model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>

	<!-- Used as a placeholder for datastores to allow substitutionGroups -->
	<xsd:element name="abstract-datastore" abstract="true" type="abstractDatastoreType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for datastore elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common datastore information -->
	<xsd:complexType name="abstractDatastoreType"/>

	<!-- Configuration data for a MongoDB datastore -->
	<xsd:element name="mongo-datastore" type="mongoDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses MongoDB for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attribute name="hostname" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Server hostname for MongoDB instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="port" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Server port for MongoDB instance.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="databaseName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>MongoDB database name for SiteWhere storage.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="useDockerLinking" type="xsd:boolean" use="optional">
					<xsd:annotation>
						<xsd:documentation>If enabled, uses environment variables set by Docker linking to
							derive host and port to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Configuration data for an HBase datastore -->
	<xsd:element name="hbase-datastore" type="hbaseDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses Apache HBase for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hbaseDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attribute name="quorum" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>ZooKeeper quorum address</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="zookeeperClientPort" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>ZooKeeper client port. Defaults to 2181.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="zookeeperZnodeParent" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>ZooKeeper znode parent. Defaults to '/hbase'.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="zookeeperZnodeRootServer" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>ZooKeeper znode root server. Defaults to 'root-region-server'.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device management caches to allow substitutionGroups -->
	<xsd:element name="abstract-cache" abstract="true" type="abstractCacheType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device management cache elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common cache information -->
	<xsd:complexType name="abstractCacheType"/>

	<!-- Configuration data for EHCache cache provider -->
	<xsd:element name="ehcache-device-management-cache" type="ehcacheDeviceManagementCacheType"
		substitutionGroup="abstract-cache">
		<xsd:annotation>
			<xsd:documentation>Device management cache that uses Ehcache for the underlying cache
				mechanism.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ehcacheDeviceManagementCacheType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheType">
				<xsd:attribute name="siteCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the site cache.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device specification cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device assignment cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="siteCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for site cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device specification cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device assignment cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Configuration data for Hazelcast cache provider -->
	<xsd:element name="hazelcast-cache" type="hazelcastCacheType"
		substitutionGroup="abstract-cache">
		<xsd:annotation>
			<xsd:documentation>Device management cache that uses Hazelcast for the underlying cache
				mechanism.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastCacheType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Creates default device model data -->
	<xsd:complexType name="defaultDeviceModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<!-- Creates default user model data -->
	<xsd:complexType name="defaultUserModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="inboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="inbound-event-processor" type="inboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom inbound event processor implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-event-storage-processor" type="defaultEventStorageProcessorType">
					<xsd:annotation>
						<xsd:documentation>
							Provides standard behavior of storing SiteWhere events via
							service provider interfaces. If this event processor is not enabled, data will not
							be stored or otherwise processed by SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="inboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultEventStorageProcessorType"/>

	<!-- Used as a placeholder for outbound processor elements to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-processor" abstract="true"
		type="abstractOutboundProcessorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound processor elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common outbound processor element information -->
	<xsd:complexType name="abstractOutboundProcessorType"/>

	<xsd:complexType name="outboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="outbound-event-processor" type="outboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom outbound event processor implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element ref="abstract-outbound-processor"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="outboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Provisioning outbound event processor -->
	<xsd:element name="provisioning-event-processor" type="provisioningEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Hands off outbound device command events to the provisioning
				subsystem. If this event processor is not configured, no commands will be sent to
				devices.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="provisioningEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
				<xsd:attribute name="numThreads" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Sets the number of threads used to process provisioning commands.
							Increase for situations where the load of device commands is high.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Zone test outbound event processor -->
	<xsd:element name="zone-test-event-processor" type="zoneTestOutboundEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				For each location event, applies a series of tests to determine
				whether the location meets a condition of being inside or outside of a given zone. If
				the condition is met, an alert is fired.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="zoneTestOutboundEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
				<xsd:sequence>
					<xsd:element name="zone-test" type="zoneTestType" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Tests a location for inclusion/exclusion from a zone and fires
								an alert if the condition is met.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Hazelcast outbound event processor -->
	<xsd:element name="hazelcast-event-processor" type="hazelcastEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to Hazelcast topics for processing by external
				consumers.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Solr outbound event processor -->
	<xsd:element name="solr-event-processor" type="solrEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to Apache Solr for indexing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Azure EventHub outbound event processor -->
	<xsd:element name="azure-eventhub-event-processor" type="azureEventHubEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to an Azure EventHub using AMQP 1.0.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="azureEventHubEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
				<xsd:attribute name="sasName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the identity used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="sasKey" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the key used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="serviceBusName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Set the service bus to connect to (e.g.
							xxx.servicebus.windows.net).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="eventHubName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of EventHub to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="zoneContainmentType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="inside"/>
			<xsd:enumeration value="outside"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="alertLevelType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="info"/>
			<xsd:enumeration value="warning"/>
			<xsd:enumeration value="error"/>
			<xsd:enumeration value="critical"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="zoneTestType">
		<xsd:attribute name="zoneToken" type="xsd:string" use="required"></xsd:attribute>
		<xsd:attribute name="condition" type="zoneContainmentType" use="required"/>
		<xsd:attribute name="alertType" type="xsd:string" use="required"></xsd:attribute>
		<xsd:attribute name="alertLevel" type="alertLevelType" use="optional"/>
		<xsd:attribute name="alertMessage" type="xsd:string" use="required"></xsd:attribute>
	</xsd:complexType>


	<!-- Used as a placeholder for provisioning implementations to allow substitutionGroups -->
	<xsd:element name="abstract-provisioning-implementation" abstract="true"
		type="abstractProvisioningType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device provisioning implementation elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common information for device provisioning implementations -->
	<xsd:complexType name="abstractProvisioningType">
		<xsd:sequence>
			<xsd:element name="event-sources" type="eventSourcesType">
				<xsd:annotation>
					<xsd:documentation>
						Event sources receive and decode events so that they may be
						processed by SiteWhere.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="inbound-processing-strategy" type="inboundProcessingStrategyType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						The inbound processing strategy controls how events are moved from
						event sources into the inbound processing chain.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="registration" type="registrationType">
				<xsd:annotation>
					<xsd:documentation>
						Registration elements define how inbound registration events are
						used to register devices.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="batch-operations" type="batchOperationsType">
				<xsd:annotation>
					<xsd:documentation>
						Batch operations are operations executed on a large number of
						devices concurrently in an asynchronous fashion.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-routing" type="commandRoutingType">
				<xsd:annotation>
					<xsd:documentation>
						Command routing determines which destination is used for
						processing a given command invocation.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-destinations" type="commandDestinationsType">
				<xsd:annotation>
					<xsd:documentation>
						Command destinations process command invocation events, encoding
						them then delivering them to devices.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Default device provisioning implementation -->
	<xsd:element name="provisioning" type="defaultProvisioningType"
		substitutionGroup="abstract-provisioning-implementation">
		<xsd:annotation>
			<xsd:documentation>Specifies the default device provisioning implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultProvisioningType">
		<xsd:complexContent>
			<xsd:extension base="abstractProvisioningType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains information about inbound event sources -->
	<xsd:complexType name="eventSourcesType">
		<xsd:sequence>
			<xsd:element ref="abstract-event-source" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for decoders to allow substitutionGroups -->
	<xsd:element name="abstract-decoder" abstract="true" type="abstractDecoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for decoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common decoder information -->
	<xsd:complexType name="abstractDecoderType"/>
	
	<!-- Reference to an event decoder defined as a Spring bean -->
	<xsd:element name="event-decoder" type="eventDecoderReferenceType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>References a decoder defined in an external bean</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventDecoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Decode using the standard SiteWhere Google Protocol Buffer definition -->
	<xsd:element name="protobuf-event-decoder" type="swProtobufDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere Google Protocol
				Buffer format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Decode using the standard SiteWhere JSON representation -->
	<xsd:element name="json-event-decoder" type="swJsonDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere JSON batch format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Echo String payload for debugging purposes -->
	<xsd:element name="echo-string-decoder" type="swEchoStringDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder for event receivers with String payloads that simply echoes
				the payload to the log.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swEchoStringDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for event sources to allow substitutionGroups -->
	<xsd:element name="abstract-event-source" abstract="true" type="abstractEventSourceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for event source elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common event source information -->
	<xsd:complexType name="abstractEventSourceType"/>
	
	<!-- Attributes common to all event sources -->
	<xsd:attributeGroup name="event-source-attributes">
		<xsd:attribute name="sourceId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for event source.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Reference to an event source defined in Spring beans -->
	<xsd:element name="event-source" type="eventSourceReferenceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source defined externally as a Spring bean</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventSourceReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from an MQTT topic and decodes it -->
	<xsd:element name="mqtt-event-source" type="mqttEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an MQTT topic and
				decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes"/>
				<xsd:attributeGroup ref="mqtt-inbound-attributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Attributes used for inbound MQTT processing -->
	<xsd:attributeGroup name="mqtt-inbound-attributes">
		<xsd:attribute name="hostname" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker hostname.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="port" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker port.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="topic" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					MQTT topic used to deliver inbound events.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

    <!-- Event source that pulls binary information from an EventHub endpoint and decodes it -->
    <xsd:element name="azure-eventhub-event-source" type="azureEventhubEventSourceType"
                 substitutionGroup="abstract-event-source">
        <xsd:annotation>
            <xsd:documentation>Event source that pulls binary information from an Azure EventHub endpoint and
                decodes it
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="azureEventhubEventSourceType">
        <xsd:complexContent>
            <xsd:extension base="abstractEventSourceType">
                <xsd:sequence>
                    <xsd:element ref="abstract-decoder"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="event-source-attributes"/>
                <xsd:attributeGroup ref="azure-eventhub-inbound-attributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Attributes used for inbound eventhub processing -->
    <xsd:attributeGroup name="azure-eventhub-inbound-attributes">
        <xsd:attribute name="targetFqn" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    EventHub targetFqn address.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="namespace" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    EventHub namespace.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entityPath" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    EventHub entityPath.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="partitionCount" type="xsd:int">
            <xsd:annotation>
                <xsd:documentation>
                    EventHub partition count.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="zkStateStore" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    zookeeper store url for EventHub state persistence.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="username" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    username for EventHub connection.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="password" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    password for EventHub connection.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

	<!-- Event source that pulls binary information from an AcitveMQ queue and decodes it -->
	<xsd:element name="activemq-event-source" type="activemqEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an ActiveMQ queue
				and decodes it.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="activemqEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes"/>
				<xsd:attribute name="transportUri" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							URI used to configure the trasport for the embedded ActiveMQ
							broker.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="dataDirectory" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Data directory used to store persistent message queues.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of JMS queue for consumers to pull messages from.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumers used to read data from the queue into
							SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Reference to an interaction handler factory defined in a Spring bean -->
	<xsd:complexType name="interactionHandlerFactoryReferenceType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Bean that implements the ISocketInteractionHandler interface.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Reads all of the client data from the socket and returns a byte array -->
	<xsd:complexType name="readAllInteractionHandlerFactoryType">
	</xsd:complexType>

	<!-- Event source that pulls binary information from a server socket and decodes it -->
	<xsd:element name="socket-event-source" type="socketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from connections to a
				TCP/IP server socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="socketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="interaction-handler-factory" type="interactionHandlerFactoryReferenceType">
							<xsd:annotation>
								<xsd:documentation>Reference to an interaction handler factory defined in an
									external Spring bean. Factory must implement ISocketInteractionHandlerFactory
									interface.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="read-all-interaction-handler-factory" type="readAllInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that reads all content from the client
									socket and delivers it to the decoder as a byte array.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
					<xsd:element ref="abstract-decoder"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes"/>
				<xsd:attribute name="port" type="xsd:int" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Port on which the server socket will listen.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numThreads" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of threads used to handle client connections to the server
							socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains web socket header information -->
	<xsd:complexType name="webSocketHeaderType">
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header name.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="value" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header value.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Event source that pulls String information from a web socket and decodes it -->
	<xsd:element name="string-web-socket-event-source" type="stringWebSocketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls String payloads from a web socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="stringWebSocketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder"/>
					<xsd:element name="header" type="webSocketHeaderType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Header that is passed to the web socket for configuration.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes"/>
				<xsd:attribute name="webSocketUrl" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							URL of the web socket to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains inbound processing strategy implementation -->
	<xsd:complexType name="inboundProcessingStrategyType">
		<xsd:sequence>
			<xsd:element ref="abstract-inbound-processing-strategy"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for inbound processing strategies to allow substitutionGroups -->
	<xsd:element name="abstract-inbound-processing-strategy" abstract="true"
		type="abstractInboundProcessingStrategyType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for inbound processing strategy elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common inbound processing strategy information -->
	<xsd:complexType name="abstractInboundProcessingStrategyType"/>
	
	<!-- Configures the default inbound processing strategy -->
	<xsd:element name="default-inbound-processing-strategy" type="defaultInboundProcessingStrategyType"
		substitutionGroup="abstract-inbound-processing-strategy">
		<xsd:annotation>
			<xsd:documentation>Configures the default inbound processing strategy
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultInboundProcessingStrategyType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessingStrategyType">
				<xsd:attribute name="numEventProcessorThreads" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Controls the number of threads that submit queued events to the
							inbound processing chain.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="enableMonitoring" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Enables monitoring output for debugging event processing.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="monitoringIntervalSec" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Number of seconds between monitoring log statements. The
							'enableMonitoring' attribute must be set to true for this to have an effect.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="registrationType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="registration-manager" type="registrationManagerReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom registration manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-registration-manager" type="defaultRegistrationManagerType">
					<xsd:annotation>
						<xsd:documentation>
							Configures the default registration manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="registrationManagerReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultRegistrationManagerType">
		<xsd:attribute name="allowNewDevices" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Indicates whether new devices should be allowed to register. If set
					to false, devices not already in the system will be rejected.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoAssignSite" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Indicates whether the site should automatically be chosen if not
					passed with registration request.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoAssignToken" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Token for site used in auto assignment. If not set and
					'autoAssignSite' is set to true, the first site will be used.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="batchOperationsType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="batch-operation-manager" type="batchOperationManagerReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom batch operation manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-batch-operation-manager" type="defaultBatchOperationManagerType">
					<xsd:annotation>
						<xsd:documentation>
							Configures the default batch operation manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="batchOperationManagerReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultBatchOperationManagerType">
		<xsd:attribute name="throttleDelayMs" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>Indicates the amount of time in milliseconds between command
					invocations when invoking a batch of commands. Used to lower system load generated by
					submitting a large number of command invocations concurrently.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandRoutingType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="command-router" type="commandRouterReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command router implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="specification-mapping-router" type="specificationMappingRouterType">
					<xsd:annotation>
						<xsd:documentation>
							Command router that distributes commands to destinations based on
							a mapping of specification token to command agent id.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="commandRouterReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterType">
		<xsd:sequence>
			<xsd:element name="mapping" type="specificationMappingRouterMappingType"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Mapping of a specification token to a destination id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="defaultDestination" type="xsd:token" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Allows a default destination to be set for specifications that do
					not have a specific mapping.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterMappingType">
		<xsd:attribute name="specification" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="destination" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Enumerates available command agent choices -->
	<xsd:complexType name="commandDestinationsType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="command-destination" type="commandDestinationReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command destination implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="mqtt-command-destination" type="mqttCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via MQTT.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="twilio-command-destination" type="twilioCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via Twilio SMS messages.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Attributes common to all command destinations -->
	<xsd:attributeGroup name="command-destination-attributes">
		<xsd:attribute name="destinationId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for command destination.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- References command destination defined in a Spring bean -->
	<xsd:complexType name="commandDestinationReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Used as a placeholder for command encoders to allow substitutionGroups -->
	<xsd:element name="abstract-command-encoder" abstract="true"
		type="abstractCommandEncoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command encoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common command encoder information -->
	<xsd:complexType name="abstractCommandEncoderType"/>
	
	<!-- Reference to a command encoder defined as a Spring bean -->
	<xsd:element name="command-encoder" type="commandEncoderReferenceType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>References a command encoder defined in an external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="commandEncoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Encodes commands using standard SiteWhere Google Protocol Buffer naming convention -->
	<xsd:element name="protobuf-command-encoder" type="swProtobufCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes commands based on standard SiteWhere
				Google Protocol Buffer naming convention.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Encodes commands using protbuf for system commands and Java serialization for custom commands -->
	<xsd:element name="java-protobuf-hybrid-encoder" type="swJavaProtobufHybridEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes system commands using protocol buffers
				but encodes custom commands using serialized Java objects. This allows Java clients to
				use the commands directly rather than having to recompile stubs based on a proto.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJavaProtobufHybridEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Command destination that delivers commands via MQTT -->
	<xsd:complexType name="mqttCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder"/>
			<xsd:choice minOccurs="0">
				<xsd:element name="parameter-extractor" type="commandDeliveryParameterExtractorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command delivery parameter extractor
							implementation that extracts MQTT delivery information from the
							device.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="hardware-id-topic-extractor" type="hardwareIdMqttParameterExtractorType">
					<xsd:annotation>
						<xsd:documentation>
							Substitutes device hardware id into expressions to determine the
							outbound topics to which MQTT messages will be sent.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes"/>
		<xsd:attribute name="hostname" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="port" type="xsd:int"></xsd:attribute>
	</xsd:complexType>

	<!-- MQTT parameter extractor that substitutes device hardware id into expressions -->
	<xsd:complexType name="hardwareIdMqttParameterExtractorType">
		<xsd:attribute name="commandTopicExpr" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="systemTopicExpr" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that delivers commands via Twilio SMS message -->
	<xsd:complexType name="twilioCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder"/>
			<xsd:element name="parameter-extractor" type="commandDeliveryParameterExtractorReferenceType">
				<xsd:annotation>
					<xsd:documentation>
						References a custom command delivery parameter extractor
						implementation that extracts SMS delivery information from the
						device.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes"/>
		<xsd:attribute name="accountSid" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="authToken" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="fromPhoneNumber" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandExecutionEncoderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryParameterExtractorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryProviderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Specifies asset management features -->
	<xsd:complexType name="assetManagementType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="asset-module" type="assetModuleReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom asset module implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-device-asset-module" type="fileSystemDeviceAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem device asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-hardware-asset-module" type="fileSystemHardwareAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem hardware asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-person-asset-module" type="fileSystemPersonAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem person asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-location-asset-module" type="fileSystemLocationAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem location asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Reference to an asset module defined in a Spring bean -->
	<xsd:complexType name="assetModuleReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem device asset module -->
	<xsd:complexType name="fileSystemDeviceAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem hardware asset module -->
	<xsd:complexType name="fileSystemHardwareAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem person asset module -->
	<xsd:complexType name="fileSystemPersonAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem location asset module -->
	<xsd:complexType name="fileSystemLocationAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Common configuration for filesystem asset modules -->
	<xsd:complexType name="fileSystemAssetModuleType">
		<xsd:attribute name="moduleId" type="xsd:string" use="optional"/>
		<xsd:attribute name="moduleName" type="xsd:string" use="optional"/>
		<xsd:attribute name="filename" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<!-- Used as a placeholder for search provider elements to allow substitutionGroups -->
	<xsd:element name="abstract-search-provider" abstract="true"
		type="abstractSearchProviderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for search provider elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common search provider element information -->
	<xsd:complexType name="abstractSearchProviderType">
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique id for referencing the search provider.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Name shown in user interface for search provider.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<!-- Specifies list of search providers -->
	<xsd:complexType name="searchProvidersType">
		<xsd:sequence>
			<xsd:element ref="abstract-search-provider" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Apache Solr search provider -->
	<xsd:element name="solr-search-provider" type="solrSearchProviderType"
		substitutionGroup="abstract-search-provider">
		<xsd:annotation>
			<xsd:documentation>
				Search provider that sends search requests to Apache Solr and
				returns the results as matching SiteWhere events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrSearchProviderType">
		<xsd:complexContent>
			<xsd:extension base="abstractSearchProviderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for global elements to allow substitutionGroups -->
	<xsd:element name="abstract-global" abstract="true" type="abstractGlobalType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for global elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common global element information -->
	<xsd:complexType name="abstractGlobalType"/>

	<!-- Contains global configuration elements -->
	<xsd:complexType name="globalsType">
		<xsd:sequence>
			<xsd:element ref="abstract-global" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Configuration data for Hazelcast services -->
	<xsd:element name="hazelcast-configuration" type="hazelcastConfigurationType"
		substitutionGroup="abstract-global">
		<xsd:annotation>
			<xsd:documentation>Global configuration settings for Hazelcasst.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractGlobalType">
				<xsd:attribute name="configFileLocation" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>Path to Hazelcast configuration file.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configuration data for Solr services -->
	<xsd:element name="solr-configuration" type="solrConfigurationType"
		substitutionGroup="abstract-global">
		<xsd:annotation>
			<xsd:documentation>Global configuration settings for Apache Solr.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractGlobalType">
				<xsd:attribute name="solrServerUrl" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>URL used by Solr client to access server.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <!-- Configuration data for Groovy services -->
    <xsd:element name="groovy-configuration" type="groovyConfigurationType"
                 substitutionGroup="abstract-global">
        <xsd:annotation>
            <xsd:documentation>Global configuration settings for Groovy scripting.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="groovyConfigurationType">
        <xsd:complexContent>
            <xsd:extension base="abstractGlobalType">
                <xsd:attribute name="debug" type="xsd:boolean" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>Turns on Groovy script engine debugging if true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="verbose" type="xsd:boolean" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>Turns on Groovy script engine verbose flag if true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

</xsd:schema>